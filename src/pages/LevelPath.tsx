import { StackNavigationProp } from '@react-navigation/stack'
import React, { useEffect, useState } from 'react'
import { Dimensions, FlatList, ImageBackground, Pressable, StyleSheet, Text, View } from 'react-native'
import { RootStackParamList } from '../components/navigation/LogedNavigator'
import { useNavigation } from '@react-navigation/native'
import { useSelector } from 'react-redux'
import Progression from '../components/path/Progression'
import { darkOrange, green, lightBlue, orange, pink, styles, white, yellow } from '../../assets/style/style'
import CustomText from '../components/CustomText'
import Svg, { Path } from 'react-native-svg'

type LevelPathScreenNavigationProp = StackNavigationProp<RootStackParamList, 'LevelPath'>

const bg = require('../../assets/images/background/illustration-plage.png')

const LevelPath = ({ route }) => {

  const theme = route.params
  const navigation = useNavigation<LevelPathScreenNavigationProp>()
  const path = useSelector((state: any) => state.path.path)

  const [progressionData, setProgressionData] = useState({})
  const levels = [{
    index: 1,
    isDone: true,
    isUnlock: true,
    star: 3
  },
  {
    index: 2,
    isDone: false,
    isUnlock: true,
    star: 0
  },
  {
    index: 3,
    isDone: false,
    isUnlock: false,
    star: 0
  },
  {
    index: 4,
    isDone: false,
    isUnlock: false,
    star: 0
  },
  {
    index: 5,
    isDone: false,
    isUnlock: false,
    star: 0
  }]

  const { height } = Dimensions.get('window')
  const offset = height * 0.2

  useEffect(() => {
    switch (path.theme) {
      case 'addition':
        setProgressionData({
          title: 'Addition',
          color: yellow,
          icon: <Svg width="51" height="51" viewBox="0 0 51 51" fill="none"><Path d="M25.5 0.833496C27.7917 0.833496 30.0052 1.12863 32.1406 1.71891C34.276 2.30919 36.2639 3.1512 38.1042 4.24495C39.9444 5.3387 41.6285 6.64079 43.1562 8.1512C44.684 9.66162 45.9861 11.3456 47.0625 13.2033C48.1389 15.0609 48.9809 17.0575 49.5885 19.1929C50.1962 21.3283 50.5 23.5418 50.5 25.8335C50.5 28.1252 50.2049 30.3387 49.6146 32.4741C49.0243 34.6095 48.1823 36.5974 47.0885 38.4377C45.9948 40.2779 44.6927 41.962 43.1823 43.4897C41.6719 45.0175 39.9878 46.3196 38.1302 47.396C36.2726 48.4724 34.276 49.3144 32.1406 49.922C30.0052 50.5297 27.7917 50.8335 25.5 50.8335C23.2083 50.8335 20.9948 50.5384 18.8594 49.9481C16.724 49.3578 14.7361 48.5158 12.8958 47.422C11.0556 46.3283 9.37153 45.0262 7.84375 43.5158C6.31597 42.0054 5.01389 40.3213 3.9375 38.4637C2.86111 36.6061 2.0191 34.6182 1.41146 32.5002C0.803819 30.3821 0.5 28.1599 0.5 25.8335C0.5 23.5418 0.795139 21.3283 1.38542 19.1929C1.97569 17.0575 2.81771 15.0696 3.91146 13.2293C5.00521 11.3891 6.30729 9.70502 7.81771 8.17725C9.32812 6.64947 11.0122 5.34738 12.8698 4.271C14.7274 3.19461 16.7153 2.35259 18.8333 1.74495C20.9514 1.13732 23.1736 0.833496 25.5 0.833496ZM40.5 24.1668H27.1667V10.8335H23.8333V24.1668H10.5V27.5002H23.8333V40.8335H27.1667V27.5002H40.5V24.1668Z" fill="white" /></Svg>
        })
        break
      case 'subtraction':
        setProgressionData({
          title: 'Soustraction',
          color: lightBlue,
          icon: <Svg width="51" height="51" viewBox="0 0 51 51" fill="none"><Path d="M25.5 0.5C27.7917 0.5 30.0052 0.795139 32.1406 1.38542C34.276 1.97569 36.2639 2.81771 38.1042 3.91146C39.9444 5.00521 41.6285 6.30729 43.1562 7.81771C44.684 9.32812 45.9861 11.0122 47.0625 12.8698C48.1389 14.7274 48.9809 16.724 49.5885 18.8594C50.1962 20.9948 50.5 23.2083 50.5 25.5C50.5 27.7917 50.2049 30.0052 49.6146 32.1406C49.0243 34.276 48.1823 36.2639 47.0885 38.1042C45.9948 39.9444 44.6927 41.6285 43.1823 43.1562C41.6719 44.684 39.9878 45.9861 38.1302 47.0625C36.2726 48.1389 34.276 48.9809 32.1406 49.5885C30.0052 50.1962 27.7917 50.5 25.5 50.5C23.2083 50.5 20.9948 50.2049 18.8594 49.6146C16.724 49.0243 14.7361 48.1823 12.8958 47.0885C11.0556 45.9948 9.37153 44.6927 7.84375 43.1823C6.31597 41.6719 5.01389 39.9878 3.9375 38.1302C2.86111 36.2726 2.0191 34.2847 1.41146 32.1667C0.803819 30.0486 0.5 27.8264 0.5 25.5C0.5 23.2083 0.795139 20.9948 1.38542 18.8594C1.97569 16.724 2.81771 14.7361 3.91146 12.8958C5.00521 11.0556 6.30729 9.37153 7.81771 7.84375C9.32812 6.31597 11.0122 5.01389 12.8698 3.9375C14.7274 2.86111 16.7153 2.0191 18.8333 1.41146C20.9514 0.803819 23.1736 0.5 25.5 0.5ZM40.5 23.8333H27.1667H23.8333H10.5V27.1667H23.8333H27.1667H40.5V23.8333Z" fill="white" /></Svg>
        })
        break
      case 'multiplication':
        setProgressionData({
          title: 'Multiplication',
          color: darkOrange,
          icon: <Svg width="51" height="51" viewBox="0 0 51 51" fill="none"><Path d="M43.1777 8.1557C44.7981 9.77615 46.1546 11.5501 47.2472 13.4774C48.3398 15.4048 49.15 17.4058 49.6779 19.4805C50.2058 21.5551 50.4758 23.6666 50.4881 25.815C50.5004 27.9633 50.2303 30.0748 49.6779 32.1494C49.1255 34.2241 48.3091 36.2313 47.2288 38.1709C46.1485 40.1105 44.7981 41.8906 43.1777 43.511C41.5572 45.1315 39.7833 46.488 37.856 47.5806C35.9286 48.6732 33.9276 49.4834 31.8529 50.0113C29.7782 50.5391 27.6667 50.8092 25.5184 50.8215C23.3701 50.8338 21.2586 50.5637 19.1839 50.0113C17.1092 49.4588 15.1021 48.6425 13.1625 47.5622C11.2228 46.4819 9.44278 45.1315 7.82233 43.511C6.20188 41.8906 4.84536 40.1167 3.75278 38.1893C2.66021 36.262 1.84998 34.2609 1.32211 32.1863C0.794231 30.1116 0.524155 28.0001 0.51188 25.8518C0.499605 23.7034 0.769678 21.592 1.32211 19.5173C1.87453 17.4426 2.68476 15.4416 3.75278 13.5142C4.82081 11.5869 6.17733 9.8007 7.82233 8.1557C9.44278 6.53524 11.2167 5.17873 13.144 4.08615C15.0714 2.99357 17.0724 2.18334 19.1471 1.65547C21.2218 1.1276 23.3333 0.85752 25.4816 0.845244C27.6299 0.832968 29.7414 1.10304 31.8161 1.65547C33.8908 2.2079 35.8918 3.01812 37.8191 4.08615C39.7465 5.15417 41.5327 6.51069 43.1777 8.1557ZM37.2851 35.2615L27.857 25.8334L37.2851 16.4053L34.9281 14.0483L25.5 23.4763L16.0719 14.0483L13.7149 16.4053L23.143 25.8334L13.7149 35.2615L16.0719 37.6185L25.5 28.1904L34.9281 37.6185L37.2851 35.2615Z" fill="white" /></Svg>
        })
        break
      case 'division':
        setProgressionData({
          title: 'Division',
          color: pink,
          icon: <Svg width="51" height="51" viewBox="0 0 51 51" fill="none"><Path d="M25.5 50.5C39.3071 50.5 50.5 39.3071 50.5 25.5C50.5 11.6929 39.3071 0.5 25.5 0.5C11.6929 0.5 0.5 11.6929 0.5 25.5C0.5 39.3071 11.6929 50.5 25.5 50.5Z" fill="white" /></Svg>
        })
        break
      case 'writing':
        setProgressionData({
          title: 'Ecriture des maths',
          color: orange,
          icon: <Svg width="51" height="51" viewBox="0 0 51 51" fill="none"><Path d="M25.5 0.166992C11.6929 0.166992 0.5 11.3599 0.5 25.167C0.5 38.9741 11.6929 50.167 25.5 50.167C39.3071 50.167 50.5 38.9741 50.5 25.167C50.5 11.3599 39.3071 0.166992 25.5 0.166992ZM33.9109 7.97633C34.6438 7.98212 35.3553 8.25245 35.8929 8.79003L40.0533 12.9488C41.2033 14.0988 41.1245 16.0365 39.8806 17.2832C38.6338 18.5301 36.693 18.6042 35.5462 17.4574L31.3874 13.2987C30.2374 12.1518 30.3178 10.208 31.5616 8.9642C32.2224 8.30174 33.0803 7.96978 33.9109 7.97633ZM27.0562 13.4712L35.3753 21.7887L21.8558 35.305L13.5367 26.986L27.0562 13.4712ZM11.3773 28.5611L20.1523 37.3362L9.18004 39.5335L11.3773 28.5611Z" fill="white" /></Svg>
        })
        break
      case 'geometry':
        setProgressionData({
          title: 'Géométrie',
          color: green,
          icon: <Svg width="51" height="51" viewBox="0 0 51 51" fill="none"><Path d="M25.5 0.166992C27.7917 0.166992 30.0052 0.462131 32.1406 1.05241C34.276 1.64269 36.2639 2.4847 38.1042 3.57845C39.9444 4.6722 41.6285 5.97428 43.1562 7.4847C44.684 8.99512 45.9861 10.6791 47.0625 12.5368C48.1389 14.3944 48.9809 16.391 49.5885 18.5264C50.1962 20.6618 50.5 22.8753 50.5 25.167C50.5 27.4587 50.2049 29.6722 49.6146 31.8076C49.0243 33.943 48.1823 35.9309 47.0885 37.7712C45.9948 39.6114 44.6927 41.2955 43.1823 42.8232C41.6719 44.351 39.9878 45.6531 38.1302 46.7295C36.2726 47.8059 34.276 48.6479 32.1406 49.2555C30.0052 49.8632 27.7917 50.167 25.5 50.167C23.2083 50.167 20.9948 49.8719 18.8594 49.2816C16.724 48.6913 14.7361 47.8493 12.8958 46.7555C11.0556 45.6618 9.37153 44.3597 7.84375 42.8493C6.31597 41.3389 5.01389 39.6548 3.9375 37.7972C2.86111 35.9396 2.0191 33.9517 1.41146 31.8337C0.803819 29.7156 0.5 27.4934 0.5 25.167C0.5 22.8753 0.795139 20.6618 1.38542 18.5264C1.97569 16.391 2.81771 14.4031 3.91146 12.5628C5.00521 10.7225 6.30729 9.03852 7.81771 7.51074C9.32812 5.98296 11.0122 4.68088 12.8698 3.60449C14.7274 2.5281 16.7153 1.68609 18.8333 1.07845C20.9514 0.470812 23.1736 0.166992 25.5 0.166992Z" fill="white" /></Svg>
        })
        break
      default:
        break
    }
  }, [])

  const handleNavigation = (game) => {
    navigation.navigate('Game', game)
  }

  return (
    <ImageBackground source={bg} style={[styles.flex_1, styles.center, styles.alignSelfStrech]}>
      <Progression data={progressionData} image={path.image} />
      <View style={[styles.flex_1]}>
        <FlatList
          data={levels}
          horizontal
          contentContainerStyle={[styles.full_h, styles.full_w, styles.center, styles.justifyContentAround]}
          renderItem={({ item, index }) => (
            <View
              style={[
                style.containerLevel,
                index % 2 === 0 ? { marginTop: offset } : { marginBottom: offset },
              ]}
            >
              {
                item.isUnlock ?
                  <>
                    <View style={[styles.gap_10, style.containerLittleStar]}>
                      <Svg width="50" height="50" viewBox="0 0 50 50" fill="none">
                        <Path
                          fill={item.isDone ? yellow : white}
                          stroke={item.isDone ? white : yellow}
                          strokeWidth={item.isDone ? 1 : 5}
                          transform="scale(0.6667)"
                          d="M21.041 17.4936L21.1861 17.4423L21.2773 17.3182L31.2891 3.69033C31.2894 3.68995 31.2897 3.68957 31.29 3.68919C32.0974 2.60257 33.0376 1.80716 34.1089 1.28773L33.9265 0.911556L34.1089 1.28773C35.195 0.761083 36.3172 0.5 37.4806 0.5C38.6439 0.5 39.7661 0.761082 40.8522 1.28773L41.0346 0.911556L40.8522 1.28773C41.9236 1.80719 42.8639 2.60267 43.6713 3.6894C43.6715 3.68971 43.6717 3.69002 43.672 3.69033L53.6839 17.3182L53.775 17.4423L53.9201 17.4936L69.0685 22.8516L69.0684 22.8517L69.0768 22.8545C70.7905 23.4269 72.1124 24.4489 73.0612 25.928C74.0225 27.4265 74.5 29.0428 74.5 30.7871C74.5 31.635 74.3852 32.475 74.1547 33.3084C73.9279 34.1281 73.5591 34.9139 73.0441 35.6667L73.0406 35.6718L63.3071 50.2826L63.2197 50.4139L63.2234 50.5715L63.581 65.9344C63.6376 68.3531 62.8563 70.3607 61.2396 71.9938C59.6124 73.6374 57.7075 74.4469 55.5017 74.4469C55.5056 74.4469 55.5034 74.4467 55.4925 74.4458C55.4762 74.4444 55.4407 74.4415 55.3775 74.4351C55.2859 74.4259 55.1569 74.4118 54.9895 74.3929C54.6623 74.3557 54.1943 74.3003 53.5846 74.2265L37.62 69.5909L37.4806 69.5505L37.3411 69.5909L21.3375 74.2378L21.3186 74.2433L21.3002 74.2503C21.0118 74.3593 20.7119 74.4275 20.3993 74.4549C20.055 74.4851 19.7249 74.5 19.4089 74.5C17.2406 74.5 15.3525 73.6846 13.7233 72.0221L13.3662 72.372L13.7233 72.0221C12.1066 70.3724 11.342 68.3576 11.4306 65.9411L11.4307 65.9344L11.7883 50.5307L11.792 50.3726L11.7041 50.2411L1.95886 35.6711L1.95593 35.6668C1.44098 34.9139 1.07213 34.1281 0.845342 33.3084C0.614853 32.475 0.5 31.635 0.5 30.7871C0.5 29.0701 0.971029 27.4664 1.92088 25.9663C2.85753 24.4873 4.17425 23.4512 5.89064 22.8523L5.89264 22.8516L21.041 17.4936Z"
                        />
                      </Svg>
                    </View>
                    <View style={[styles.gap_10, style.containerMiddleStar]}>
                      <Svg width="75" height="75" viewBox="0 0 75 75" fill="none">
                        <Path fill={item.isDone ? orange : white} stroke={item.isDone ? white : yellow} strokeWidth={item.isDone ? 1 : 5} d="M21.041 17.4936L21.1861 17.4423L21.2773 17.3182L31.2891 3.69033C31.2894 3.68995 31.2897 3.68957 31.29 3.68919C32.0974 2.60257 33.0376 1.80716 34.1089 1.28773L33.9265 0.911556L34.1089 1.28773C35.195 0.761083 36.3172 0.5 37.4806 0.5C38.6439 0.5 39.7661 0.761082 40.8522 1.28773L41.0346 0.911556L40.8522 1.28773C41.9236 1.80719 42.8639 2.60267 43.6713 3.6894C43.6715 3.68971 43.6717 3.69002 43.672 3.69033L53.6839 17.3182L53.775 17.4423L53.9201 17.4936L69.0685 22.8516L69.0684 22.8517L69.0768 22.8545C70.7905 23.4269 72.1124 24.4489 73.0612 25.928C74.0225 27.4265 74.5 29.0428 74.5 30.7871C74.5 31.635 74.3852 32.475 74.1547 33.3084C73.9279 34.1281 73.5591 34.9139 73.0441 35.6667L73.0406 35.6718L63.3071 50.2826L63.2197 50.4139L63.2234 50.5715L63.581 65.9344C63.6376 68.3531 62.8563 70.3607 61.2396 71.9938C59.6124 73.6374 57.7075 74.4469 55.5017 74.4469C55.5056 74.4469 55.5034 74.4467 55.4925 74.4458C55.4762 74.4444 55.4407 74.4415 55.3775 74.4351C55.2859 74.4259 55.1569 74.4118 54.9895 74.3929C54.6623 74.3557 54.1943 74.3003 53.5846 74.2265L37.62 69.5909L37.4806 69.5505L37.3411 69.5909L21.3375 74.2378L21.3186 74.2433L21.3002 74.2503C21.0118 74.3593 20.7119 74.4275 20.3993 74.4549C20.055 74.4851 19.7249 74.5 19.4089 74.5C17.2406 74.5 15.3525 73.6846 13.7233 72.0221L13.3662 72.372L13.7233 72.0221C12.1066 70.3724 11.342 68.3576 11.4306 65.9411L11.4307 65.9344L11.7883 50.5307L11.792 50.3726L11.7041 50.2411L1.95886 35.6711L1.95593 35.6668C1.44098 34.9139 1.07213 34.1281 0.845342 33.3084C0.614853 32.475 0.5 31.635 0.5 30.7871C0.5 29.0701 0.971029 27.4664 1.92088 25.9663C2.85753 24.4873 4.17425 23.4512 5.89064 22.8523L5.89264 22.8516L21.041 17.4936Z" />
                      </Svg>
                    </View>
                    <View style={[styles.gap_10, style.containerBigStar]}>
                      <Svg width="100" height="100" viewBox="0 0 100 100" fill="none">
                        <Path fill={item.isDone ? "#F56004" : white} stroke={item.isDone ? white : yellow} strokeWidth={item.isDone ? 1 : 5} d="M27.9991 23.1677L28.1442 23.1163L28.2354 22.9923L41.5851 4.82106C41.5853 4.82076 41.5855 4.82047 41.5857 4.82017C42.6765 3.35197 43.9504 2.27266 45.4058 1.567L45.1876 1.1171L45.4058 1.567C46.8759 0.854175 48.397 0.5 49.9741 0.5C51.5512 0.5 53.0723 0.854175 54.5423 1.567L54.7605 1.1171L54.5424 1.567C55.9977 2.27265 57.2716 3.35195 58.3624 4.82013C58.3626 4.82044 58.3628 4.82075 58.3631 4.82106L71.7128 22.9923L71.8039 23.1163L71.949 23.1677L92.1469 30.3117L92.1468 30.3117L92.1552 30.3145C94.4753 31.0895 96.269 32.4757 97.5552 34.4806C98.8538 36.505 99.5 38.6912 99.5 41.0495C99.5 42.1953 99.3448 43.3303 99.0335 44.4556C98.726 45.5673 98.2261 46.6317 97.5296 47.6497L97.5262 47.6548L84.5482 67.1359L84.4608 67.2672L84.4644 67.4248L84.9413 87.9087C85.0177 91.1765 83.9603 93.8978 81.7712 96.1089C79.5717 98.3307 76.9899 99.4292 74.0022 99.4292C74.0027 99.4292 74.0014 99.4291 73.9978 99.4288C73.9831 99.4277 73.9308 99.4238 73.82 99.4126C73.6968 99.4002 73.524 99.3814 73.3006 99.3561C72.8613 99.3062 72.2323 99.2318 71.4127 99.1325L50.1135 92.948L49.9741 92.9075L49.8346 92.948L28.4964 99.1438L28.4775 99.1493L28.4591 99.1563C28.0602 99.307 27.6454 99.4014 27.2136 99.4392C26.7501 99.4799 26.3052 99.5 25.8786 99.5C22.9397 99.5 20.3802 98.3926 18.1787 96.1461L17.8216 96.496L18.1787 96.1461C15.9897 93.9124 14.9545 91.1811 15.0742 87.9154L15.0743 87.9087L15.5512 67.3704L15.5548 67.2122L15.4669 67.0808L2.47327 47.6541L2.47034 47.6498C1.77399 46.6317 1.27404 45.5673 0.966476 44.4556C0.655231 43.3302 0.5 42.1953 0.5 41.0495C0.5 38.7276 1.13752 36.5585 2.42034 34.5326C3.69004 32.5277 5.47648 31.1229 7.79928 30.3124L7.80127 30.3117L27.9991 23.1677Z" />
                      </Svg>
                    </View>
                  </>
                  :
                  <Svg style={style.lock} width="100" height="100" viewBox="0 0 100 100" fill="none">
                    <Path d="M73.5832 68.1832C70.9404 68.1832 68.798 66.0408 68.798 63.398V35.5338C68.798 26.1426 61.1576 18.502 51.7662 18.502C42.375 18.502 34.7344 26.1424 34.7344 35.5338V51.7402C34.7344 54.383 32.592 56.5254 29.9492 56.5254C27.3064 56.5254 25.1641 54.383 25.1641 51.7402V35.5338C25.1641 20.8652 37.0977 8.93164 51.7662 8.93164C66.4348 8.93164 78.3684 20.8652 78.3684 35.5338V63.398C78.3684 66.0408 76.226 68.1832 73.5832 68.1832Z" fill="#B1B4B5" />
                    <Path d="M80.8824 97.1598H22.6523C17.2158 97.1598 12.8086 92.7525 12.8086 87.316V53.6504C12.8086 48.2139 17.2158 43.8066 22.6523 43.8066H80.8824C86.3189 43.8066 90.7262 48.2139 90.7262 53.6504V87.3158C90.7262 92.7525 86.3189 97.1598 80.8824 97.1598Z" fill="#FFB636" />
                    <Path d="M21.3506 89.227H20.8574C19.3041 89.227 18.0449 87.9678 18.0449 86.4145V54.5527C18.0449 52.9994 19.3041 51.7402 20.8574 51.7402H21.3506C22.9039 51.7402 24.1631 52.9994 24.1631 54.5527V86.4145C24.1631 87.9678 22.9039 89.227 21.3506 89.227Z" fill="#FFD469" />
                  </Svg>
              }
              <Pressable
                style={[
                  styles.center,
                  styles.gap_10,
                  !item.isUnlock ? styles.border_lock : styles.border_yellow, style.level,
                  !item.isUnlock ? styles.bg_lock : item.isDone ? styles.bg_yellow : styles.bg_white
                ]}
                onPress={() => { item.isUnlock ? handleNavigation('duel') : null }}
              >
                <CustomText style={[!item.isUnlock ? styles.lockTypo : item.isDone ? styles.white : styles.yellow, styles.textAlign, style.text]}>
                  {item.index}
                </CustomText>
              </Pressable>
            </View>
          )}
        />
      </View>
    </ImageBackground>
  )
}

export default LevelPath

const style = StyleSheet.create({
  containerLevel: {
    position: 'relative',
    alignItems: 'flex-end',
    alignContent: 'flex-end',
    rowGap: 0,
    columnGap: -24,
    flexWrap: 'wrap'
  },
  lock: {
    position: 'absolute',
    left: -14,
    bottom: -8,
    zIndex: 999
  },
  containerLittleStar: {
    position: 'absolute',
    left: -20,
    top: 38,
    flexDirection: 'column',
    alignItems: 'flex-start',
    zIndex: 999
  },
  containerMiddleStar: {
    position: 'absolute',
    left: 36,
    top: -34,
    flexDirection: 'column',
    alignItems: 'flex-start',
    zIndex: 999
  },
  containerBigStar: {
    width: 100,
    position: 'absolute',
    right: -35,
    top: -29,
    flexDirection: 'column',
    alignItems: 'flex-start',
    zIndex: 999
  },
  level: {
    display: 'flex',
    width: 200,
    height: 200,
    paddingVertical: 30,
    paddingHorizontal: 60,
    borderWidth: 5,
    borderRadius: 100
  },
  text: {
    fontSize: 96,
    fontStyle: 'normal',
    fontWeight: 700,
    letterSpacing: -0.96
  }
})